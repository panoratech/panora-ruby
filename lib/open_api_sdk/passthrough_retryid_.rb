# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class PassthroughRetryid
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(retry_id: ::String).returns(::OpenApiSDK::Operations::GetRetriedRequestResponseResponse) }
    def get_retried_request_response(retry_id)
      # get_retried_request_response - Retrieve response of a failed passthrough request due to rate limits
      request = ::OpenApiSDK::Operations::GetRetriedRequestResponseRequest.new(
        
        retry_id: retry_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetRetriedRequestResponseRequest,
        base_url,
        '/passthrough/{retryId}',
        request
      )
      headers = {}
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetRetriedRequestResponseResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      
      res
    end
  end
end

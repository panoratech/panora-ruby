# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  

    class EventResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # Direction of the event
      field :direction, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('direction') } }
      # Connection ID associated with the event
      field :id_connection, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id_connection') } }
      # Unique identifier for the event
      field :id_event, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id_event') } }
      # Linked user ID associated with the event
      field :id_linked_user, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id_linked_user') } }
      # Project ID associated with the event
      field :id_project, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id_project') } }
      # HTTP method used for the event
      field :method, ::OpenApiSDK::Shared::Method, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('method'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::Method, false) } }
      # Provider associated with the event
      field :provider, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('provider') } }
      # Status of the event
      field :status, ::OpenApiSDK::Shared::EventResponseStatus, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::EventResponseStatus, false) } }
      # Timestamp of the event
      field :timestamp, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('timestamp'), 'decoder': Utils.datetime_from_iso_format(false) } }
      # Scope of the event
      field :type, ::OpenApiSDK::Shared::EventResponseType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::EventResponseType, false) } }
      # URL associated with the event
      field :url, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('url') } }


      sig { params(direction: ::String, id_connection: ::String, id_event: ::String, id_linked_user: ::String, id_project: ::String, method: ::OpenApiSDK::Shared::Method, provider: ::String, status: ::OpenApiSDK::Shared::EventResponseStatus, timestamp: ::DateTime, type: ::OpenApiSDK::Shared::EventResponseType, url: ::String).void }
      def initialize(direction: nil, id_connection: nil, id_event: nil, id_linked_user: nil, id_project: nil, method: nil, provider: nil, status: nil, timestamp: nil, type: nil, url: nil)
        @direction = direction
        @id_connection = id_connection
        @id_event = id_event
        @id_linked_user = id_linked_user
        @id_project = id_project
        @method = method
        @provider = provider
        @status = status
        @timestamp = timestamp
        @type = type
        @url = url
      end
    end
  end
end

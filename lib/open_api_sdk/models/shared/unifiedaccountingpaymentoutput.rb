# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  

    class UnifiedAccountingPaymentOutput < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The UUID of the associated account
      field :account_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('account_id') } }
      # The UUID of the associated accounting period
      field :accounting_period_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('accounting_period_id') } }
      # The UUID of the associated company info
      field :company_info_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('company_info_id') } }
      # The UUID of the associated contact
      field :contact_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('contact_id') } }
      # The created date of the payment record
      field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The currency of the payment
      field :currency, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('currency') } }
      # The exchange rate applied to the payment
      field :exchange_rate, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('exchange_rate') } }
      # The custom field mappings of the object between the remote 3rd party & Panora
      field :field_mappings, T.nilable(::OpenApiSDK::Shared::UnifiedAccountingPaymentOutputFieldMappings), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('field_mappings') } }
      # The UUID of the payment record
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }
      # The UUID of the associated invoice
      field :invoice_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('invoice_id') } }
      # The line items associated with this payment
      field :line_items, T.nilable(T::Array[::OpenApiSDK::Shared::LineItem]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('line_items') } }
      # The last modified date of the payment record
      field :modified_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('modified_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The remote data of the payment in the context of the 3rd Party
      field :remote_data, T.nilable(::OpenApiSDK::Shared::UnifiedAccountingPaymentOutputRemoteData), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remote_data') } }
      # The remote ID of the payment in the context of the 3rd Party
      field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remote_id') } }
      # The date when the payment was last updated in the remote system
      field :remote_updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remote_updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The total amount of the payment in cents
      field :total_amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_amount') } }
      # The UUIDs of the tracking categories associated with the payment
      field :tracking_categories, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tracking_categories') } }
      # The date of the transaction
      field :transaction_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transaction_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The type of payment
      field :type, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type') } }


      sig { params(account_id: T.nilable(::String), accounting_period_id: T.nilable(::String), company_info_id: T.nilable(::String), contact_id: T.nilable(::String), created_at: T.nilable(::DateTime), currency: T.nilable(::String), exchange_rate: T.nilable(::String), field_mappings: T.nilable(::OpenApiSDK::Shared::UnifiedAccountingPaymentOutputFieldMappings), id: T.nilable(::String), invoice_id: T.nilable(::String), line_items: T.nilable(T::Array[::OpenApiSDK::Shared::LineItem]), modified_at: T.nilable(::DateTime), remote_data: T.nilable(::OpenApiSDK::Shared::UnifiedAccountingPaymentOutputRemoteData), remote_id: T.nilable(::String), remote_updated_at: T.nilable(::DateTime), total_amount: T.nilable(::Float), tracking_categories: T.nilable(T::Array[::String]), transaction_date: T.nilable(::DateTime), type: T.nilable(::String)).void }
      def initialize(account_id: nil, accounting_period_id: nil, company_info_id: nil, contact_id: nil, created_at: nil, currency: nil, exchange_rate: nil, field_mappings: nil, id: nil, invoice_id: nil, line_items: nil, modified_at: nil, remote_data: nil, remote_id: nil, remote_updated_at: nil, total_amount: nil, tracking_categories: nil, transaction_date: nil, type: nil)
        @account_id = account_id
        @accounting_period_id = accounting_period_id
        @company_info_id = company_info_id
        @contact_id = contact_id
        @created_at = created_at
        @currency = currency
        @exchange_rate = exchange_rate
        @field_mappings = field_mappings
        @id = id
        @invoice_id = invoice_id
        @line_items = line_items
        @modified_at = modified_at
        @remote_data = remote_data
        @remote_id = remote_id
        @remote_updated_at = remote_updated_at
        @total_amount = total_amount
        @tracking_categories = tracking_categories
        @transaction_date = transaction_date
        @type = type
      end
    end
  end
end

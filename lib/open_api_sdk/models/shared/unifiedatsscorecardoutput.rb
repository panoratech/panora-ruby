# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  

    class UnifiedAtsScorecardOutput < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The UUID of the application
      field :application_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('application_id') } }
      # The created date of the object
      field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The custom field mappings of the object between the remote 3rd party & Panora
      field :field_mappings, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('field_mappings') } }
      # The UUID of the scorecard
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }
      # The UUID of the interview
      field :interview_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('interview_id') } }
      # The modified date of the object
      field :modified_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('modified_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The overall recommendation
      field :overall_recommendation, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('overall_recommendation') } }
      # The remote creation date of the scorecard
      field :remote_created_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remote_created_at') } }
      # The remote data of the scorecard in the context of the 3rd Party
      field :remote_data, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remote_data') } }
      # The remote ID of the scorecard in the context of the 3rd Party
      field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remote_id') } }
      # The submission date of the scorecard
      field :submitted_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('submitted_at') } }


      sig { params(application_id: T.nilable(::String), created_at: T.nilable(::DateTime), field_mappings: T.nilable(T::Hash[Symbol, ::Object]), id: T.nilable(::String), interview_id: T.nilable(::String), modified_at: T.nilable(::DateTime), overall_recommendation: T.nilable(::String), remote_created_at: T.nilable(::String), remote_data: T.nilable(T::Hash[Symbol, ::Object]), remote_id: T.nilable(::String), submitted_at: T.nilable(::String)).void }
      def initialize(application_id: nil, created_at: nil, field_mappings: nil, id: nil, interview_id: nil, modified_at: nil, overall_recommendation: nil, remote_created_at: nil, remote_data: nil, remote_id: nil, submitted_at: nil)
        @application_id = application_id
        @created_at = created_at
        @field_mappings = field_mappings
        @id = id
        @interview_id = interview_id
        @modified_at = modified_at
        @overall_recommendation = overall_recommendation
        @remote_created_at = remote_created_at
        @remote_data = remote_data
        @remote_id = remote_id
        @submitted_at = submitted_at
      end
    end
  end
end

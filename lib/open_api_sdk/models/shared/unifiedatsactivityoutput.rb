# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  

    class UnifiedAtsActivityOutput < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The type of activity
      field :activity_type, T.nilable(::OpenApiSDK::Shared::ActivityType), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('activity_type'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::ActivityType, true) } }
      # The body of the activity
      field :body, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('body') } }
      # The UUID of the candidate
      field :candidate_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('candidate_id') } }
      # The created date of the object
      field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The custom field mappings of the object between the remote 3rd party & Panora
      field :field_mappings, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('field_mappings') } }
      # The UUID of the activity
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }
      # The modified date of the object
      field :modified_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('modified_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The remote creation date of the activity
      field :remote_created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remote_created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The remote data of the activity in the context of the 3rd Party
      field :remote_data, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remote_data') } }
      # The remote ID of the activity in the context of the 3rd Party
      field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remote_id') } }
      # The subject of the activity
      field :subject, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('subject') } }
      # The visibility of the activity
      field :visibility, T.nilable(::OpenApiSDK::Shared::Visibility), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('visibility'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::Visibility, true) } }


      sig { params(activity_type: T.nilable(::OpenApiSDK::Shared::ActivityType), body: T.nilable(::String), candidate_id: T.nilable(::String), created_at: T.nilable(::DateTime), field_mappings: T.nilable(T::Hash[Symbol, ::Object]), id: T.nilable(::String), modified_at: T.nilable(::DateTime), remote_created_at: T.nilable(::DateTime), remote_data: T.nilable(T::Hash[Symbol, ::Object]), remote_id: T.nilable(::String), subject: T.nilable(::String), visibility: T.nilable(::OpenApiSDK::Shared::Visibility)).void }
      def initialize(activity_type: nil, body: nil, candidate_id: nil, created_at: nil, field_mappings: nil, id: nil, modified_at: nil, remote_created_at: nil, remote_data: nil, remote_id: nil, subject: nil, visibility: nil)
        @activity_type = activity_type
        @body = body
        @candidate_id = candidate_id
        @created_at = created_at
        @field_mappings = field_mappings
        @id = id
        @modified_at = modified_at
        @remote_created_at = remote_created_at
        @remote_data = remote_data
        @remote_id = remote_id
        @subject = subject
        @visibility = visibility
      end
    end
  end
end
